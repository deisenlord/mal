; stats.mal - Basic statistic that work on one dimensional lists or vectors
; 
; DJE 23

(ns stats

(def! sum (fn* [l]
    (lists/reduce + 0 l)
))

(def! cumsum (fn* [l]
    (let*+ [ csum (atom 0)
             res  (atom ()) ]
        (map (fn* [e] (do (swap! res concat (+ e @csum)) (swap! csum + e))) l)  
        @res
    )
))

(def! maxseq (fn* [l]
    (apply max l)
))

(def! minseq (fn* [l]
    (apply min l)
))

(def! minloc (fn* [l]
    (second (lists/reduce
        (fn* [state v]
            (let* [curmin (first state) minidx (second state) curidx (third state)]
                (if (< v curmin)
                    [v curidx (inc curidx)]
	                [curmin minidx (inc curidx)]
                )
             ) 	 
         )
	     [(first l) 0 0] l))
))

(def! maxloc (fn* [l]
    (second (lists/reduce
        (fn* [state v]
            (let* [curmin (first state) minidx (second state) curidx (third state)]
                (if (> v curmin)
                    [v curidx (inc curidx)]
	                [curmin minidx (inc curidx)]
                )
            )
	     )
	     [(first l) 0 0] l))
))

(def! mean (fn* [l]
    (/ (sum l) (count l))
))

(def! median (fn* [l]
    (let* [ sorted (sort l {})
            n      (count l) 
            mid    (dec (int (/ (inc n) 2))) ]
        (if (odd? n)
            (nth sorted mid)
            (/ (+ (nth sorted mid) (nth sorted (+ mid 1))) 2)
        )
    )
))

; R method, include median in both halves on even n
(def! iqr (fn* [l]
    (let*+ [ sorted (sort l {})
            n       (count l)
	    mid     (int (/ n 2))
	    mid     (if (odd? n) (+ mid 1) mid)
	    q1      0
	    q3      0 ]

            (if (odd? n)
	        (do
	            (def! q1 (median (map (fn* [i] (nth sorted i)) (lists/range mid))))
	            (def! q3 (median (map (fn* [i] (nth sorted i)) (lists/range n 1 (- mid 1)))))
		)
		(do
	            (def! q1 (median (map (fn* [i] (nth sorted i)) (lists/range  mid))))
	            (def! q3 (median (map (fn* [i] (nth sorted i)) (lists/range n 1 mid))))
		)
	    )
        (- q3 q1)
    )
))


(def! ssqr (fn* [l]
    (lists/reduce (fn* [acc x] (+ acc (* x x))) 0 l)
))

(def! variance (fn* [l]
    (let* [ m (mean l)
            s (map (fn* [e] (- e m)) l ) ]
        (/ (ssqr s) (count l))
    )
))

(def! std (fn* [l]
    (sqrt (variance  l))
))


; Freedman-Diaconis rule for number of bins, considers range of data
; Accumulates optional auxilary vector instead of simple frequency.
(def! histogram (fn* [v & aux]
    (let*+ [ n        (count v)
             minv     (stats/minseq v)
	     minv     (- minv (* 0.025 minv))
             maxv     (stats/maxseq v)
             maxv     (+ maxv (* 0.025 maxv))
             binwidth (/ (* 2 (stats/iqr v)) (pow n (/ 1 3)))
             nbins    (ceil (/ (- maxv minv) binwidth)) 
             hist     (apply hash-map (lists/flatten (map (fn* [i] (list i 0)) (lists/range nbins))))
             ahist    (atom hist) ]

           (if (empty? aux)
	       (def! aux (lists/repeat n 1))
               (def! aux (first aux))
	   )
           (map (fn* [ival] (let*+ [ bin (int (/ (nth v ival) binwidth)) ] (swap! ahist assoc bin (+ (get @ahist bin) (nth aux ival))))) (lists/range n))
           (apply hash-map (lists/interleave (lists/range maxv binwidth minv) (vals @ahist)))
    )
))   



)
