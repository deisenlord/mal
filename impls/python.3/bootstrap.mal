; bootstrap.mal - Adds the require macro and it's support, requires in other core functionality.
;          
; DJE

; Path list for finding source files
(def! *PATHLIB* ["." "./libmal" "/usr/local/lib/mal"])


; This belongs in the list namespace but needed by require

; Replace elements in a list, replacement values in map
(def! replace (fn* [amap alist]
    (if (empty? alist)
        ()
	(let* [e    (first alist)
	       v    (if (contains? amap e) (get amap e) e)]
	    (concat v (replace amap (rest alist)))
        )
    )
))

; These two belongs in a string namespace but are needed for require's implementation

; Join a lists members as strings with given seperators
(def! join (fn* [sep alist]
    (if (empty? alist)
        ""
        (str (first alist) (if (= (count alist) 1) "" sep) (join sep (rest alist)))
    )
))	  

; Replace character in string 
(def! replace-char (fn* [s old new]
    (join "" (replace (hash-map old new) (seq s)))     
))

; Find a file on a path list
(def! find-file (fn* [fname pathlist]
    (if (empty? pathlist)
        nil
	(let* [pathname (str (first pathlist) "/" fname)]
	    (if (fileexists? pathname)
	        pathname
		(find-file fname (rest pathlist))
	    )
	)
    )
))

; Find a file on the offical path list
(def! find-path (fn* [fname]
    (find-file fname *PATHLIB*)
))

; Load namespace. Alias is global which is broken, really needs to have scope
(defmacro! require (fn* [ns & options]
    (let* [opt   (apply hash-map options)
           fname (str (replace-char (str ns) "." "/") ".mal")
	   path  (find-path fname) ]
        (if (not (nil? path))
	    (do
                (eval (read-string (str "(do " (slurp path) "\nnil)") fname))
	        (if (contains? opt :alias)
	            (ns-alias ns (get opt :alias))
	        )
		nil
	    )
	    (throw (str "require: cannot locate '" (str fname) "' on " (str *PATHLIB*))) 
        )
    )
))

; Tracing for functions, includes recursive level
(defmacro! trace-off (fn* [func] (list 'trace func (str func) false)))
(defmacro! trace-on  (fn* [func]  (list 'trace func (str func) true)))

;;**
;;;; Add standard functionality here
;;**


(require core)
(require lists)

